#!/usr/bin/env python


"""
Amplitude source location
"""


# Python Standard Library
import os

from linecache import getline

# Other dependencies
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import tl

from numba import jit

# Local files


__author__ = 'Leonardo van der Laat'
__email__  = 'laat@umich.edu'


def grid(xmin, xmax, ymin, ymax, zmin, zmax, cellsize):
    x = np.arange(xmin, xmax+cellsize, cellsize)
    y = np.arange(ymin, ymax+cellsize, cellsize)
    z = np.arange(zmin, zmax+cellsize, cellsize)

    xxx, yyy, zzz = np.meshgrid(x, y, z)
    return xxx, yyy, zzz


# @jit
def locate(
    Q, alpha, beta, f,
    a, x, y, z, xxx, yyy, zzz
):
    B = np.pi*f/Q/beta

    res = np.zeros(xxx.shape)

    n_stations = len(a)

    for i in range(n_stations-1):
        d_i = np.sqrt((xxx-x[i])**2 + (yyy-y[i])**2 + (zzz-z[i])**2)
        for j in range(i+1, n_stations):
            d_j = np.sqrt((xxx-x[j])**2 + (yyy-y[j])**2 + (zzz-z[j])**2)

            r_obs = a[i]/a[j]
            r_calc = (np.exp(-B*d_i) / d_i**alpha) / \
                     (np.exp(-B*d_j) / d_j**alpha)
            res += (r_calc - r_obs)**2
    return np.sqrt(res)


def main():
    zmin = -2500
    zmax = 1300
    cellsize = 100
    band = [0.38, 1.2]
    Q, alpha, beta, f = 20, 1, 1800, 0.7

    # Parse arguments
    args = tl.utils.parse_args()

    # Parse configuration YAML file
    c = tl.config.read(args.configfile)

    # Output folder directory
    # folderpath = tl.utils.create_folder(c.io.output_dir, f'ASL', c.io.overwrite)

    # Logger
    logger = tl.utils.get_logger()

    # Channels
    channels = pd.read_csv(c.amplitude.channels_csv, comment='/')
    channels = channels[channels.channel.str[-1] == 'Z']
    channels.reset_index(inplace=True)

    # features metadata
    meta = tl.features.to_dataframe(channels, c.amplitude.bands)

    xxx, yyy, zzz = grid(channels.x.min(), channels.x.max(), channels.y.min(),
                         channels.y.max(), zmin, zmax, cellsize)

    # Read catalog
    df = pd.read_csv(os.path.join(c.engineer.amp_folder, 'data.csv'))
    df = tl.catalog.filter(
        df,
        magnitude_min=c.dataset.magnitude_min,
        magnitude_max=c.dataset.magnitude_max,
        n_events=c.dataset.n_events
    )

    # Read metadata
    metadata_file = '/Users/laat/Dropbox (University of Michigan)/paper/dat/SITE/meta.csv'
    meta = pd.read_csv(metadata_file)
    meta = meta[(meta.freqmin == band[0]) & (meta.freqmax == band[1])]

    # Correct site effect
    for i, row in meta.iterrows():
        df[row.key] /= row.cf

    for i, row in df.iterrows():
        res = locate(
            Q, alpha, beta, f,
            row[meta.key].values, meta.x.values, meta.y.values, meta.z.values,
            xxx, yyy, zzz
        )
        idx = np.unravel_index(res.argmin(), res.shape)
        loc = np.array([xxx[idx], yyy[idx], zzz[idx]])

        # _z = np.log(res[:, :, idx[1]])
        # plt.pcolormesh(
        #     xxx[0, :, 0], yyy[:, 0, 0], _z,
        #     vmin=np.quantile(_z, 0.00),
        #     vmax=np.quantile(_z, 0.975)
        # )
        # plt.scatter(meta.x, meta.y)
        # plt.scatter(loc[0], loc[1], marker='*', fc='w', s=100)
        # plt.scatter(row.x, row.y, marker='*', fc='r', s=100)

        _z = np.log(res[idx[0]]).T


        plt.pcolormesh(
            xxx[0, :, 0], zzz[0, 0, :], _z,
            vmin=np.quantile(_z, 0.00),
            vmax=np.quantile(_z, 0.95)
        )
        plt.scatter(meta.x, meta.z)
        plt.scatter(loc[0], loc[2], marker='*', fc='w', s=100)
        plt.scatter(row.x, row.z, marker='*', fc='r', s=100)

        plt.show()
        print(); exit()
    return


if __name__ == '__main__':
    main()
